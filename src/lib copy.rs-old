use std::fs::File;
use std::ops::DerefMut;
use std::sync::Arc;

use godot::engine::{Node, AudioStreamGeneratorPlayback};
use godot::prelude::*;

use godot::sys::GodotFfi;
use rustysynth::*;

#[derive(GodotClass)]
#[class(base=Node)]
pub struct Musician {
    pub pan: u8,
    pub vol: u8,
    pub soundfont : Arc<SoundFont>,
    pub settings : SynthesizerSettings,
    pub synthesizer : Synthesizer,
    #[base]
    base: Base<Node>,
}

#[godot_api]
impl Musician {
    #[func]
    fn testPlay(&mut self, mut playback: Gd<AudioStreamGeneratorPlayback>)  {

        // Play some notes (middle C, E, G).
        self.synthesizer.note_on(0, 60, 100);
        self.synthesizer.note_on(0, 64, 100);
        self.synthesizer.note_on(0, 67, 100);

        // The output buffer (0.5 seconds).
        let sample_count = (self.settings.sample_rate / 2) as usize;
        let mut left: Vec<f32> = vec![0_f32; sample_count];
        let mut right: Vec<f32> = vec![0_f32; sample_count];

        // Render the waveform.
        self.synthesizer.render(&mut left[..], &mut right[..]);

        (1..sample_count).for_each(|i|{
            playback.push_frame(Vector2 { x:left[i], y:right[i] });
        });

  }
}

#[godot_api]
impl NodeVirtual for Musician {
        fn init(base: Base<Node>) -> Self {
            let mut sf2: File = File::open("proteus.sf2").unwrap();
            let soundfont: Arc<SoundFont> = Arc::new(SoundFont::new(&mut sf2).unwrap());

            // Create the synthesizer.
            let settings = SynthesizerSettings::new(48000);
            let synthesizer = Synthesizer::new(&soundfont, &settings).unwrap();

            Musician {
                pan: 50,
                vol: 107,
                soundfont,
                settings,
                synthesizer,
                base
            }
    }
    fn ready(&mut self) {
    }   
}

struct Terpsikore;

#[gdextension]
unsafe impl ExtensionLibrary for Terpsikore {}